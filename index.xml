<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zrepl - ZFS replication</title>
    <link>https://zrepl.github.io/</link>
    <description>Recent content on zrepl - ZFS replication</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://zrepl.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Job Types</title>
      <link>https://zrepl.github.io/configuration/jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zrepl.github.io/configuration/jobs/</guid>
      <description>A job is the unit of activity tracked by the zrepl daemon and configured in the configuration file.
Every job has a unique name, a type and type-dependent fields which are documented on this page.
Check out the tutorial and cmd/sampleconf/ for examples on how job types are actually used.
Job Types Source    Parameter Default Description / Example     type  source   name  unique name of the job   serve   serve transport specification   datasets   filter for datasets to expose to client   snapshot_prefix  prefix for ZFS snapshots taken by this job   interval  snapshotting interval   prune   prune policy policy for datasets in datasets with prefix snapshot_prefix     Snapshotting Task (every interval, patient )  A snapshot of filesystems matched by datasets is taken every interval with prefix snapshot_prefix.</description>
    </item>
    
    <item>
      <title>Mapping &amp; Filter Syntax</title>
      <link>https://zrepl.github.io/configuration/map_filter_syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zrepl.github.io/configuration/map_filter_syntax/</guid>
      <description>Mapping &amp;amp; Filter Syntax For various job types, a filesystem mapping or filter needs to be specified.
Both have in common that they take a filesystem path (in the ZFS filesystem hierarchy)as parameters and return something. Mappings return a target filesystem and filters return a filter result.
The pattern syntax is the same for mappings and filters and is documented in the following section.
Pattern Syntax A mapping / filter is specified as a YAML dictionary with patterns as keys and results as values.</description>
    </item>
    
    <item>
      <title>Transports</title>
      <link>https://zrepl.github.io/configuration/transports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zrepl.github.io/configuration/transports/</guid>
      <description>A transport provides an authenticated io.ReadWriteCloser to the RPC layer. (An io.ReadWriteCloser is essentially a bidirectional reliable communication channel.)
Currently, only the ssh+stdinserver transport is supported.
ssh+stdinserver The way the ssh+stdinserver transport works is inspired by git shell and Borg Backup. It is implemented in the Go package github.com/zrepl/zrepl/sshbytestream. The config excerpts are taken from the tutorial which you should complete before reading further.
serve jobs: - name: pull_backup type: source serve: type: stdinserver client_identity: backup-srv.</description>
    </item>
    
    <item>
      <title>Pruning Policies</title>
      <link>https://zrepl.github.io/configuration/prune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zrepl.github.io/configuration/prune/</guid>
      <description>In zrepl, pruning means destroying snapshots by some policy.
A pruning policy takes a list of snapshots and - for each snapshot - decides whether it should be kept or destroyed.
The job context defines which snapshots are even considered for pruning, for example through the snapshot_prefix variable. Check the job definition for details.
Currently, the retention grid is the only supported pruning policy.
Retention Grid jobs: - name: pull_app-srv .</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://zrepl.github.io/configuration/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zrepl.github.io/configuration/logging/</guid>
      <description>Under Construction See cmd/sampleconf/random/logging.yml .</description>
    </item>
    
    <item>
      <title>Miscellaneous</title>
      <link>https://zrepl.github.io/configuration/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zrepl.github.io/configuration/misc/</guid>
      <description>Runtime Directories &amp;amp; UNIX Sockets zrepl daemon creates various UNIX sockets to allow communicating with it:
 the stdinserver transport connects to a socket named after client_identity parameter the control subcommand connects to a defined control socket  There is no further authentication on these sockets. Therefore we have to make sure they can only be created and accessed by zrepl daemon.
In fact, zrepl daemon will not bind a socket to a path in a directory that is world-accessible.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zrepl.github.io/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zrepl.github.io/_header/</guid>
      <description>zrepl Documentation</description>
    </item>
    
  </channel>
</rss>